name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false
  GRADLE_USER_HOME: ${{ github.workspace }}/.gradle

jobs:
  lint-and-format:
    name: üîç Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run ktlint
        run: ./gradlew ktlintCheck --continue

      - name: Run detekt
        run: ./gradlew detekt --continue

      - name: Upload lint reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lint-reports
          path: |
            **/build/reports/ktlint/
            **/build/reports/detekt/

  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest --continue

      - name: Generate test report
        run: ./gradlew koverXmlReport

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./build/reports/kover/report.xml
          fail_ci_if_error: false

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports
          path: |
            **/build/reports/tests/
            **/build/reports/kover/

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'PocoCare'
          path: '.'
          format: 'ALL'

      - name: Upload OWASP results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-check-report
          path: reports/

  build:
    name: üèóÔ∏è Build APK
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build debug APK
        run: ./gradlew assembleDebug

      - name: Build release APK
        run: ./gradlew assembleRelease

      - name: Generate SBOM
        run: ./gradlew cycloneDxBom

      - name: Upload APKs
        uses: actions/upload-artifact@v3
        with:
          name: apk-files
          path: |
            **/build/outputs/apk/**/*.apk
            **/build/reports/bom.json

  ui-tests:
    name: üé≠ UI Tests
    runs-on: macos-latest
    needs: build
    strategy:
      matrix:
        api-level: [28, 30, 33]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run UI tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedDebugAndroidTest

      - name: Upload UI test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ui-test-reports-api-${{ matrix.api-level }}
          path: |
            **/build/reports/androidTests/

  quality-gate:
    name: üö™ Quality Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, security-scan, ui-tests]
    if: always()
    steps:
      - name: Check previous jobs
        run: |
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "Unit tests failed"
            exit 1
          fi
          if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "Security scan failed"
            exit 1
          fi
          if [[ "${{ needs.ui-tests.result }}" != "success" ]]; then
            echo "UI tests failed"
            exit 1
          fi
          echo "All quality checks passed! ‚úÖ"

  notify:
    name: üîî Notify
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: always()
    steps:
      - name: Notify success
        if: needs.quality-gate.result == 'success'
        run: echo "‚úÖ Pipeline succeeded! Ready for merge."

      - name: Notify failure
        if: needs.quality-gate.result != 'success'
        run: echo "‚ùå Pipeline failed. Check the logs for details."